{"version":3,"sources":["Components/TimeLineItem.js","App.js","serviceWorker.js","index.js"],"names":["TimeLineItem","getWrapperClass","props","_this","progress","getTimelineItemClass","getDateClass","getStatusClass","getDetailsClass","react_default","a","createElement","className","this","actionDate","status","details","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","steps","toConsumableArray","map","step","index","TimeLineItem_TimeLineItem","key","id","previousProgress","flag","i","length","console","log","document","getElementById","innerHTML","style","padding","renderSteps","Boolean","window","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcbec9f9.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class TimeLineItem extends Component {\n    getWrapperClass = (props) =>{\n        if(this.props.progress==='done')\n            return 'timeline-wrapper'\n        if(this.props.progress==='active')\n            return 'active-timeline-wrapper'\n        if(this.props.progress==='pending')\n            return 'pending-timeline-wrapper'\n\n    }\n    getTimelineItemClass = (props) =>{\n        if(this.props.progress==='done')\n            return 'timeline-item'\n        if(this.props.progress==='active')\n            return 'active-timeline-item'\n        if(this.props.progress==='pending')\n            return 'pending-timeline-item'\n\n\n    }\n    getDateClass = (props) =>{\n        if(this.props.progress==='pending')\n        return 'pending-timeline-date';\n        else{\n            return 'timeline-date';\n        }\n    }\n    getStatusClass = (props) =>{\n        if(this.props.progress==='pending')\n            return 'pending-timeline-staus';\n        else{\n            return 'timeline-staus';\n        }\n    }\n    getDetailsClass = (props) =>{\n        if(this.props.progress==='pending')\n            return 'pending-timeline-details';\n        else{\n            return 'timeline-details';\n        }\n    }\n    render() {\n        return (\n            <div className={this.getWrapperClass()} >\n            <div className= {this.getTimelineItemClass()} >\n            <div className={this.getDateClass()}>\n                {this.props.actionDate}\n            </div>\n            <div className={this.getStatusClass()}>\n                {this.props.status}\n            </div>\n            <div className={this.getDetailsClass()} >\n                {this.props.details}\n            </div>\n            </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './main.css';\nimport TimeLineItem from './Components/TimeLineItem'\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n    data:[ \n    {//First Step\n      actionDate: \"July 2\",\n      status:\"You have taken Test Drive\",\n      details:\"of 2010 White Alto LXI\",\n      progress:\"done\"\n      //Progress have 3 phase 1. done, 2.active, 3.pending\n    },\n    {//Second Step\n      actionDate: \"July 5\",\n      status:\"Pay Token\",\n      details:\"for 2010 White Alto LXI\",\n      progress:\"done\"\n    },\n    {//Third Step\n      actionDate: \"July 5\",\n      status:\"Processing your loan\",\n      details:\"Usually takes 3-6 days\",\n      progress:\"active\"\n    },\n    {//Fourth Step\n      actionDate: \"\",\n      status:\"Take car delivery\",\n      details:\"From our Mumbai Showroom\",\n      progress:\"pending\"\n    },\n    {//Fifth Step\n      actionDate: \"\",\n      status:\"Start your ownership Process \",\n      details:\"Please bring the list of documents at the time of delivery \",\n      progress:\"pending\"\n    },\n  ]\n  }\n  }\n  \n  renderSteps(){\n    let data = [...this.state.data];\n    //Ittrating over data, bringing every steps and passing it to TimeLineItem (This is also helpul in acchiving scallability)\n    let steps=data.map( (step,index) =>{\n      return(\n        <TimeLineItem\n        actionDate={step.actionDate}\n        status={step.status}\n        details={step.details}\n        progress={step.progress}\n        key = {index}\n        />\n      )\n    } )\n\n    return(\n      <div>\n        <div id='err-msg'></div>\n        {steps}\n      </div>\n    )\n    \n  }\n  componentDidMount(){\n    let previousProgress;\n    let flag=0;\n    let data = [...this.state.data];\n    for(let i=0;i<data.length;i++){\n      if(i===0){\n        previousProgress=data[i].progress\n      }\n      else{\n        if(previousProgress==='active' && data[i].progress==='done' ){\n          console.log(i)\n          flag=1;\n          break;\n        }\n        if(previousProgress==='active' && data[i].progress==='active' ){\n          console.log(i)\n          flag=1;\n          break;\n        }\n        if(previousProgress==='pending' && data[i].progress==='done' ){\n          console.log(i)\n          flag=1;\n          break;\n        }\n        if(previousProgress==='pending' && data[i].progress==='active' ){\n          console.log(i)\n          flag=1;\n          break;\n        }\n      }\n      previousProgress=data[i].progress;\n    }\n    if(flag===1){\n      document.getElementById('err-msg').innerHTML= '*Please check order of progress*';\n    }\n    \n\n  }\n  \n  \n  \n  render() {\n  return (\n    <div className=\"App\" style={{padding: \"5%\"}}>\n      {this.renderSteps()}\n    </div>\n  );\n}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}